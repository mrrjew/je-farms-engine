// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Database configuration
datasource db {
  provider = "postgresql"
  url      = env("PROD_DATABASE_URL")
}

// User model representing customers
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  email    String  @unique
  userName String?
  hash     String
  isAdmin  Boolean @default(false)
  cartId   Int?
  cart     Cart?    @relation(fields: [cartId], references: [id])

  // Define relationships
  orders   Order[] // A user can have multiple orders
  payments Payment[] // A user can have multiple payments

  @@map("users")
}

// Product model representing items in the store
model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  name        String
  href        String  @default("")
  description String?
  price       Float
  stock       Int

  // Define relationships
  orders      Order[] // A product can be part of multiple orders
  carts       Cart[] // A product can be part of multiple carts
  CartProduct CartProduct[]

  @@map("products")
}

// Order model representing a purchase order
enum Status {
  PENDING
  PAID
  CANCELLED
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int // Foreign key to User model
  user   User   @relation(fields: [userId], references: [id])
  status Status @default(PENDING)

  // Define relationships
  products Product[] // An order can contain multiple products
  quantity Int
  Payment  Payment[]
}

// Cart model representing a shopping cart

model Cart {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  userId       Int
  cartProducts CartProduct[]
  Product      Product?      @relation(fields: [productId], references: [id])
  productId    Int?
  User         User[]
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     Float
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// Payment model representing a payment transaction
model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int // Foreign key to User model
  user   User @relation(fields: [userId], references: [id])

  amount Float
  status Status @default(PAID) // Default status for payments

  // Define relationships
  order   Order? @relation(fields: [orderId], references: [id]) // A payment is associated with an order (optional)
  orderId Int?
}
